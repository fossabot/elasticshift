// Code generated by protoc-gen-go.
// source: pb/client.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Client represents an OAuth2 client.
type ClientMsg struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret       string   `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	RedirectUris []string `protobuf:"bytes,3,rep,name=redirect_uris,json=redirectUris" json:"redirect_uris,omitempty"`
	TrustedPeers []string `protobuf:"bytes,4,rep,name=trusted_peers,json=trustedPeers" json:"trusted_peers,omitempty"`
	Public       bool     `protobuf:"varint,5,opt,name=public" json:"public,omitempty"`
	Name         string   `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	LogoUrl      string   `protobuf:"bytes,7,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *ClientMsg) Reset()                    { *m = ClientMsg{} }
func (m *ClientMsg) String() string            { return proto.CompactTextString(m) }
func (*ClientMsg) ProtoMessage()               {}
func (*ClientMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ClientMsg) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ClientMsg) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *ClientMsg) GetRedirectUris() []string {
	if m != nil {
		return m.RedirectUris
	}
	return nil
}

func (m *ClientMsg) GetTrustedPeers() []string {
	if m != nil {
		return m.TrustedPeers
	}
	return nil
}

func (m *ClientMsg) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *ClientMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientMsg) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

// CreateClientReq is a request to make a client.
type CreateReq struct {
	Client *ClientMsg `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
}

func (m *CreateReq) Reset()                    { *m = CreateReq{} }
func (m *CreateReq) String() string            { return proto.CompactTextString(m) }
func (*CreateReq) ProtoMessage()               {}
func (*CreateReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CreateReq) GetClient() *ClientMsg {
	if m != nil {
		return m.Client
	}
	return nil
}

// CreateClientResp returns the response from creating a client.
type CreateRes struct {
	Exists bool       `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Client *ClientMsg `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
}

func (m *CreateRes) Reset()                    { *m = CreateRes{} }
func (m *CreateRes) String() string            { return proto.CompactTextString(m) }
func (*CreateRes) ProtoMessage()               {}
func (*CreateRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CreateRes) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *CreateRes) GetClient() *ClientMsg {
	if m != nil {
		return m.Client
	}
	return nil
}

// DeleteClientReq is a request to delete a client.
type DeleteReq struct {
	// The ID of the client.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *DeleteReq) Reset()                    { *m = DeleteReq{} }
func (m *DeleteReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteReq) ProtoMessage()               {}
func (*DeleteReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *DeleteReq) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// DeleteClientResp determines if the.
type DeleteRes struct {
	NotExist bool `protobuf:"varint,1,opt,name=not_exist,json=notExist" json:"not_exist,omitempty"`
}

func (m *DeleteRes) Reset()                    { *m = DeleteRes{} }
func (m *DeleteRes) String() string            { return proto.CompactTextString(m) }
func (*DeleteRes) ProtoMessage()               {}
func (*DeleteRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DeleteRes) GetNotExist() bool {
	if m != nil {
		return m.NotExist
	}
	return false
}

func init() {
	proto.RegisterType((*ClientMsg)(nil), "pb.ClientMsg")
	proto.RegisterType((*CreateReq)(nil), "pb.CreateReq")
	proto.RegisterType((*CreateRes)(nil), "pb.CreateRes")
	proto.RegisterType((*DeleteReq)(nil), "pb.DeleteReq")
	proto.RegisterType((*DeleteRes)(nil), "pb.DeleteRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Client service

type ClientClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := grpc.Invoke(ctx, "/pb.Client/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	out := new(DeleteRes)
	err := grpc.Invoke(ctx, "/pb.Client/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Client service

type ClientServer interface {
	Create(context.Context, *CreateReq) (*CreateRes, error)
	Delete(context.Context, *DeleteReq) (*DeleteRes, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Client/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Client/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Client_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Client_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/client.proto",
}

func init() { proto.RegisterFile("pb/client.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x4a, 0xe3, 0x40,
	0x14, 0xc6, 0x49, 0xda, 0x4d, 0x93, 0xb3, 0xdb, 0x2d, 0x0c, 0x6c, 0x99, 0xed, 0x2e, 0x4b, 0xc9,
	0x22, 0x04, 0x2f, 0x1a, 0xac, 0x77, 0x82, 0x57, 0x55, 0x41, 0x41, 0x90, 0x40, 0xaf, 0x43, 0xfe,
	0x1c, 0xc2, 0x40, 0xcc, 0xc4, 0x99, 0x89, 0x08, 0xe2, 0x8d, 0x2f, 0xe0, 0x85, 0xaf, 0xe4, 0x1b,
	0xf8, 0x0a, 0x3e, 0x88, 0x64, 0x26, 0x4d, 0xdb, 0x1b, 0xef, 0xf2, 0x7d, 0xf9, 0xbe, 0xf9, 0x9d,
	0x33, 0x0c, 0x4c, 0xea, 0x34, 0xcc, 0x4a, 0x86, 0x95, 0x5a, 0xd4, 0x82, 0x2b, 0x4e, 0xec, 0x3a,
	0x9d, 0xfd, 0x2d, 0x38, 0x2f, 0x4a, 0x0c, 0x93, 0x9a, 0x85, 0x49, 0x55, 0x71, 0x95, 0x28, 0xc6,
	0x2b, 0x69, 0x12, 0xfe, 0x9b, 0x05, 0xde, 0x4a, 0x57, 0xae, 0x65, 0x41, 0x7e, 0x82, 0xcd, 0x72,
	0x6a, 0xcd, 0xad, 0xc0, 0x8b, 0x6c, 0x96, 0x93, 0x29, 0x38, 0x12, 0x33, 0x81, 0x8a, 0xda, 0xda,
	0xeb, 0x14, 0xf9, 0x0f, 0x63, 0x81, 0x39, 0x13, 0x98, 0xa9, 0xb8, 0x11, 0x4c, 0xd2, 0xc1, 0x7c,
	0x10, 0x78, 0xd1, 0x8f, 0x8d, 0xb9, 0x16, 0x4c, 0xb6, 0x21, 0x25, 0x1a, 0xa9, 0x30, 0x8f, 0x6b,
	0x44, 0x21, 0xe9, 0xd0, 0x84, 0x3a, 0xf3, 0xa6, 0xf5, 0x5a, 0x42, 0xdd, 0xa4, 0x25, 0xcb, 0xe8,
	0xb7, 0xb9, 0x15, 0xb8, 0x51, 0xa7, 0x08, 0x81, 0x61, 0x95, 0xdc, 0x22, 0x75, 0x34, 0x57, 0x7f,
	0x93, 0xdf, 0xe0, 0x96, 0xbc, 0xe0, 0x71, 0x23, 0x4a, 0x3a, 0xd2, 0xfe, 0xa8, 0xd5, 0x6b, 0x51,
	0xfa, 0x4b, 0xf0, 0x56, 0x02, 0x13, 0x85, 0x11, 0xde, 0x91, 0x03, 0x70, 0xcc, 0x2d, 0xe8, 0x4d,
	0xbe, 0x2f, 0xc7, 0x8b, 0x3a, 0x5d, 0xf4, 0x4b, 0x46, 0xdd, 0x4f, 0xff, 0x6a, 0xdb, 0xd1, 0x73,
	0xe0, 0x03, 0x93, 0x4a, 0xea, 0x8e, 0x1b, 0x75, 0x6a, 0xe7, 0x2c, 0xfb, 0xab, 0xb3, 0x02, 0xf0,
	0xce, 0xb0, 0x44, 0xc3, 0xff, 0x03, 0x9e, 0xb1, 0xe3, 0xfe, 0x32, 0x5d, 0x63, 0x5c, 0xe6, 0xbb,
	0x49, 0xd9, 0x26, 0x2b, 0xae, 0x62, 0xcd, 0xea, 0xc0, 0x6e, 0xc5, 0xd5, 0x79, 0xab, 0x97, 0x2f,
	0x16, 0x38, 0x86, 0x44, 0x4e, 0xc1, 0x31, 0xa3, 0x12, 0xc3, 0xdf, 0xac, 0x3a, 0xdb, 0x93, 0xd2,
	0xff, 0xf5, 0xfc, 0xfe, 0xf1, 0x6a, 0x4f, 0x7c, 0x08, 0xef, 0x8f, 0xba, 0x97, 0x70, 0x62, 0x1d,
	0x92, 0x0b, 0x70, 0x0c, 0xd3, 0xd4, 0xfb, 0x49, 0x67, 0x7b, 0x52, 0xfa, 0xff, 0x74, 0x9d, 0x92,
	0xe9, 0xb6, 0x1e, 0x3e, 0xf6, 0xab, 0x3c, 0xa5, 0x8e, 0x7e, 0x33, 0xc7, 0x9f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x7b, 0x5d, 0x00, 0xef, 0x68, 0x02, 0x00, 0x00,
}
