// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/client.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/client.proto
	api/repository.proto
	api/team.proto
	api/user.proto
	api/vcs.proto

It has these top-level messages:
	InsertClientReq
	InsertClientRes
	RemoveClientReq
	RemoveClientRes
	Repo
	GetRepositoriesReq
	GetRepositoriesRes
	GetRepositoryReq
	GetRepositoryRes
	CreateTeamReq
	CreateTeamRes
	SignUpReq
	SignUpRes
	SignInReq
	SignInRes
	VCSAccount
	GetVCSReq
	GetVCSRes
	SyncVCSReq
	SyncVCSRes
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ClientReq is a request to make a client.
type InsertClientReq struct {
	Id           string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret       string   `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	RedirectUris []string `protobuf:"bytes,3,rep,name=redirect_uris,json=redirectUris" json:"redirect_uris,omitempty"`
	TrustedPeers []string `protobuf:"bytes,4,rep,name=trusted_peers,json=trustedPeers" json:"trusted_peers,omitempty"`
	Public       bool     `protobuf:"varint,5,opt,name=public" json:"public,omitempty"`
	Name         string   `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	LogoUrl      string   `protobuf:"bytes,7,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *InsertClientReq) Reset()                    { *m = InsertClientReq{} }
func (m *InsertClientReq) String() string            { return proto.CompactTextString(m) }
func (*InsertClientReq) ProtoMessage()               {}
func (*InsertClientReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InsertClientReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InsertClientReq) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *InsertClientReq) GetRedirectUris() []string {
	if m != nil {
		return m.RedirectUris
	}
	return nil
}

func (m *InsertClientReq) GetTrustedPeers() []string {
	if m != nil {
		return m.TrustedPeers
	}
	return nil
}

func (m *InsertClientReq) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *InsertClientReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InsertClientReq) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

// InsertClientResp returns the response from creating a client.
type InsertClientRes struct {
	AlreadyExists bool     `protobuf:"varint,1,opt,name=already_exists,json=alreadyExists" json:"already_exists,omitempty"`
	Id            string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Secret        string   `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
	RedirectUris  []string `protobuf:"bytes,4,rep,name=redirect_uris,json=redirectUris" json:"redirect_uris,omitempty"`
	TrustedPeers  []string `protobuf:"bytes,5,rep,name=trusted_peers,json=trustedPeers" json:"trusted_peers,omitempty"`
	Public        bool     `protobuf:"varint,6,opt,name=public" json:"public,omitempty"`
	Name          string   `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	LogoUrl       string   `protobuf:"bytes,8,opt,name=logo_url,json=logoUrl" json:"logo_url,omitempty"`
}

func (m *InsertClientRes) Reset()                    { *m = InsertClientRes{} }
func (m *InsertClientRes) String() string            { return proto.CompactTextString(m) }
func (*InsertClientRes) ProtoMessage()               {}
func (*InsertClientRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InsertClientRes) GetAlreadyExists() bool {
	if m != nil {
		return m.AlreadyExists
	}
	return false
}

func (m *InsertClientRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InsertClientRes) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *InsertClientRes) GetRedirectUris() []string {
	if m != nil {
		return m.RedirectUris
	}
	return nil
}

func (m *InsertClientRes) GetTrustedPeers() []string {
	if m != nil {
		return m.TrustedPeers
	}
	return nil
}

func (m *InsertClientRes) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *InsertClientRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InsertClientRes) GetLogoUrl() string {
	if m != nil {
		return m.LogoUrl
	}
	return ""
}

// RemoveClientReq is a request to delete a client.
type RemoveClientReq struct {
	// The ID of the client.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *RemoveClientReq) Reset()                    { *m = RemoveClientReq{} }
func (m *RemoveClientReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveClientReq) ProtoMessage()               {}
func (*RemoveClientReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RemoveClientReq) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

// RemoveClientResp determines if the.
type RemoveClientRes struct {
	NotFound bool `protobuf:"varint,1,opt,name=not_found,json=notFound" json:"not_found,omitempty"`
}

func (m *RemoveClientRes) Reset()                    { *m = RemoveClientRes{} }
func (m *RemoveClientRes) String() string            { return proto.CompactTextString(m) }
func (*RemoveClientRes) ProtoMessage()               {}
func (*RemoveClientRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RemoveClientRes) GetNotFound() bool {
	if m != nil {
		return m.NotFound
	}
	return false
}

func init() {
	proto.RegisterType((*InsertClientReq)(nil), "api.InsertClientReq")
	proto.RegisterType((*InsertClientRes)(nil), "api.InsertClientRes")
	proto.RegisterType((*RemoveClientReq)(nil), "api.RemoveClientReq")
	proto.RegisterType((*RemoveClientRes)(nil), "api.RemoveClientRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Client service

type ClientClient interface {
	Create(ctx context.Context, in *InsertClientReq, opts ...grpc.CallOption) (*InsertClientRes, error)
	Delete(ctx context.Context, in *RemoveClientReq, opts ...grpc.CallOption) (*RemoveClientRes, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Create(ctx context.Context, in *InsertClientReq, opts ...grpc.CallOption) (*InsertClientRes, error) {
	out := new(InsertClientRes)
	err := grpc.Invoke(ctx, "/api.Client/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Delete(ctx context.Context, in *RemoveClientReq, opts ...grpc.CallOption) (*RemoveClientRes, error) {
	out := new(RemoveClientRes)
	err := grpc.Invoke(ctx, "/api.Client/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Client service

type ClientServer interface {
	Create(context.Context, *InsertClientReq) (*InsertClientRes, error)
	Delete(context.Context, *RemoveClientReq) (*RemoveClientRes, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Client/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Create(ctx, req.(*InsertClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Client/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Delete(ctx, req.(*RemoveClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Client_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Client_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/client.proto",
}

func init() { proto.RegisterFile("api/client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6a, 0xdb, 0x30,
	0x18, 0xc7, 0xb1, 0x9d, 0x38, 0x8e, 0x58, 0x92, 0x21, 0xb6, 0xa0, 0x65, 0x63, 0x04, 0x8f, 0x41,
	0xd8, 0xc1, 0x66, 0xdb, 0x6d, 0xd7, 0x6c, 0x83, 0xb0, 0xcb, 0x30, 0xcb, 0xd9, 0x28, 0xf6, 0xb7,
	0x20, 0x50, 0x24, 0x4f, 0x92, 0xc3, 0xc6, 0xe8, 0xa5, 0xaf, 0xd0, 0xc7, 0xe8, 0x9b, 0xf4, 0xda,
	0x57, 0xe8, 0x0b, 0xf4, 0x0d, 0x8a, 0x65, 0x37, 0xa1, 0x89, 0x1b, 0x7a, 0xf3, 0xf7, 0xf3, 0xdf,
	0x9f, 0xf8, 0x59, 0x7f, 0xf4, 0x9c, 0x16, 0x2c, 0xce, 0x38, 0x03, 0x61, 0xa2, 0x42, 0x49, 0x23,
	0xb1, 0x47, 0x0b, 0x36, 0x79, 0xb3, 0x96, 0x72, 0xcd, 0x21, 0xae, 0xde, 0x52, 0x21, 0xa4, 0xa1,
	0x86, 0x49, 0xa1, 0xeb, 0x48, 0x78, 0xe5, 0xa0, 0xd1, 0x42, 0x68, 0x50, 0x66, 0x6e, 0xbf, 0x4c,
	0xe0, 0x0f, 0x1e, 0x22, 0x97, 0xe5, 0xc4, 0x99, 0x3a, 0xb3, 0x7e, 0xe2, 0xb2, 0x1c, 0x8f, 0x91,
	0xaf, 0x21, 0x53, 0x60, 0x88, 0x6b, 0x59, 0x33, 0xe1, 0x77, 0x68, 0xa0, 0x20, 0x67, 0x0a, 0x32,
	0x93, 0x96, 0x8a, 0x69, 0xe2, 0x4d, 0xbd, 0x59, 0x3f, 0x79, 0x76, 0x0f, 0x97, 0x8a, 0xe9, 0x2a,
	0x64, 0x54, 0xa9, 0x0d, 0xe4, 0x69, 0x01, 0xa0, 0x34, 0xe9, 0xd4, 0xa1, 0x06, 0xfe, 0xac, 0x58,
	0x75, 0x42, 0x51, 0xae, 0x38, 0xcb, 0x48, 0x77, 0xea, 0xcc, 0x82, 0xa4, 0x99, 0x30, 0x46, 0x1d,
	0x41, 0x37, 0x40, 0x7c, 0x7b, 0xae, 0x7d, 0xc6, 0xaf, 0x50, 0xc0, 0xe5, 0x5a, 0xa6, 0xa5, 0xe2,
	0xa4, 0x67, 0x79, 0xaf, 0x9a, 0x97, 0x8a, 0x87, 0xb7, 0x47, 0x32, 0x1a, 0xbf, 0x47, 0x43, 0xca,
	0x15, 0xd0, 0xfc, 0x5f, 0x0a, 0x7f, 0x99, 0x36, 0xda, 0x8a, 0x05, 0xc9, 0xa0, 0xa1, 0xdf, 0x2c,
	0x6c, 0x9c, 0xdd, 0x16, 0x67, 0xef, 0xb4, 0x73, 0xe7, 0x29, 0xce, 0xdd, 0x93, 0xce, 0x7e, 0xab,
	0x73, 0xef, 0x11, 0xe7, 0xe0, 0xa1, 0x73, 0x84, 0x46, 0x09, 0x6c, 0xe4, 0x16, 0xf6, 0xf7, 0xf7,
	0x1a, 0xf5, 0xeb, 0x1a, 0xa4, 0xbb, 0x6b, 0x0c, 0x6a, 0xb0, 0xc8, 0x8f, 0xf3, 0xba, 0xca, 0x0b,
	0x69, 0xd2, 0xdf, 0xb2, 0x14, 0x79, 0xf3, 0x77, 0x02, 0x21, 0xcd, 0xf7, 0x6a, 0xfe, 0x74, 0xe9,
	0x20, 0xbf, 0x8e, 0xe2, 0x1f, 0xc8, 0x9f, 0x2b, 0xa0, 0x06, 0xf0, 0x8b, 0x88, 0x16, 0x2c, 0x3a,
	0xe8, 0xcd, 0xa4, 0x8d, 0xea, 0xf0, 0xe5, 0xf9, 0xf5, 0xcd, 0x85, 0x3b, 0x0a, 0x51, 0xbc, 0xfd,
	0xd8, 0xd4, 0xf3, 0x8b, 0xf3, 0x01, 0xff, 0x42, 0xfe, 0x57, 0xe0, 0xb0, 0x5b, 0x76, 0x20, 0x31,
	0x69, 0xa3, 0x3a, 0x7c, 0x6b, 0x97, 0x11, 0x3c, 0xde, 0x2f, 0x8b, 0xff, 0xef, 0x64, 0xcf, 0x56,
	0xbe, 0x6d, 0xf5, 0xe7, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x70, 0xf2, 0xb6, 0x0c, 0x03,
	0x00, 0x00,
}
