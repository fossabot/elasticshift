// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/work.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TopReq struct {
	CommandFilter string `protobuf:"bytes,1,opt,name=command_filter,json=commandFilter" json:"command_filter,omitempty"`
}

func (m *TopReq) Reset()                    { *m = TopReq{} }
func (m *TopReq) String() string            { return proto.CompactTextString(m) }
func (*TopReq) ProtoMessage()               {}
func (*TopReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TopReq) GetCommandFilter() string {
	if m != nil {
		return m.CommandFilter
	}
	return ""
}

type TopRes struct {
	Pid      string `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Cpu      string `protobuf:"bytes,2,opt,name=cpu" json:"cpu,omitempty"`
	Command  string `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	Memory   string `protobuf:"bytes,4,opt,name=memory" json:"memory,omitempty"`
	Lifetime string `protobuf:"bytes,5,opt,name=lifetime" json:"lifetime,omitempty"`
}

func (m *TopRes) Reset()                    { *m = TopRes{} }
func (m *TopRes) String() string            { return proto.CompactTextString(m) }
func (*TopRes) ProtoMessage()               {}
func (*TopRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *TopRes) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *TopRes) GetCpu() string {
	if m != nil {
		return m.Cpu
	}
	return ""
}

func (m *TopRes) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TopRes) GetMemory() string {
	if m != nil {
		return m.Memory
	}
	return ""
}

func (m *TopRes) GetLifetime() string {
	if m != nil {
		return m.Lifetime
	}
	return ""
}

type KillTaskReq struct {
	Pid string `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
}

func (m *KillTaskReq) Reset()                    { *m = KillTaskReq{} }
func (m *KillTaskReq) String() string            { return proto.CompactTextString(m) }
func (*KillTaskReq) ProtoMessage()               {}
func (*KillTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *KillTaskReq) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

type KillTaskRes struct {
	Success string `protobuf:"bytes,1,opt,name=success" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *KillTaskRes) Reset()                    { *m = KillTaskRes{} }
func (m *KillTaskRes) String() string            { return proto.CompactTextString(m) }
func (*KillTaskRes) ProtoMessage()               {}
func (*KillTaskRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *KillTaskRes) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func (m *KillTaskRes) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type StopBuildReq struct {
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
}

func (m *StopBuildReq) Reset()                    { *m = StopBuildReq{} }
func (m *StopBuildReq) String() string            { return proto.CompactTextString(m) }
func (*StopBuildReq) ProtoMessage()               {}
func (*StopBuildReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *StopBuildReq) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

type StopBuildRes struct {
	Success string `protobuf:"bytes,1,opt,name=success" json:"success,omitempty"`
}

func (m *StopBuildRes) Reset()                    { *m = StopBuildRes{} }
func (m *StopBuildRes) String() string            { return proto.CompactTextString(m) }
func (*StopBuildRes) ProtoMessage()               {}
func (*StopBuildRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *StopBuildRes) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func init() {
	proto.RegisterType((*TopReq)(nil), "api.TopReq")
	proto.RegisterType((*TopRes)(nil), "api.TopRes")
	proto.RegisterType((*KillTaskReq)(nil), "api.KillTaskReq")
	proto.RegisterType((*KillTaskRes)(nil), "api.KillTaskRes")
	proto.RegisterType((*StopBuildReq)(nil), "api.StopBuildReq")
	proto.RegisterType((*StopBuildRes)(nil), "api.StopBuildRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Work service

type WorkClient interface {
	Top(ctx context.Context, in *TopReq, opts ...grpc.CallOption) (Work_TopClient, error)
	KillTask(ctx context.Context, in *KillTaskReq, opts ...grpc.CallOption) (*KillTaskRes, error)
	StopBuild(ctx context.Context, in *StopBuildReq, opts ...grpc.CallOption) (*StopBuildReq, error)
}

type workClient struct {
	cc *grpc.ClientConn
}

func NewWorkClient(cc *grpc.ClientConn) WorkClient {
	return &workClient{cc}
}

func (c *workClient) Top(ctx context.Context, in *TopReq, opts ...grpc.CallOption) (Work_TopClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Work_serviceDesc.Streams[0], c.cc, "/api.Work/Top", opts...)
	if err != nil {
		return nil, err
	}
	x := &workTopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Work_TopClient interface {
	Recv() (*TopRes, error)
	grpc.ClientStream
}

type workTopClient struct {
	grpc.ClientStream
}

func (x *workTopClient) Recv() (*TopRes, error) {
	m := new(TopRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workClient) KillTask(ctx context.Context, in *KillTaskReq, opts ...grpc.CallOption) (*KillTaskRes, error) {
	out := new(KillTaskRes)
	err := grpc.Invoke(ctx, "/api.Work/KillTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workClient) StopBuild(ctx context.Context, in *StopBuildReq, opts ...grpc.CallOption) (*StopBuildReq, error) {
	out := new(StopBuildReq)
	err := grpc.Invoke(ctx, "/api.Work/StopBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Work service

type WorkServer interface {
	Top(*TopReq, Work_TopServer) error
	KillTask(context.Context, *KillTaskReq) (*KillTaskRes, error)
	StopBuild(context.Context, *StopBuildReq) (*StopBuildReq, error)
}

func RegisterWorkServer(s *grpc.Server, srv WorkServer) {
	s.RegisterService(&_Work_serviceDesc, srv)
}

func _Work_Top_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TopReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkServer).Top(m, &workTopServer{stream})
}

type Work_TopServer interface {
	Send(*TopRes) error
	grpc.ServerStream
}

type workTopServer struct {
	grpc.ServerStream
}

func (x *workTopServer) Send(m *TopRes) error {
	return x.ServerStream.SendMsg(m)
}

func _Work_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Work/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServer).KillTask(ctx, req.(*KillTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Work_StopBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkServer).StopBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Work/StopBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkServer).StopBuild(ctx, req.(*StopBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Work_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Work",
	HandlerType: (*WorkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KillTask",
			Handler:    _Work_KillTask_Handler,
		},
		{
			MethodName: "StopBuild",
			Handler:    _Work_StopBuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Top",
			Handler:       _Work_Top_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/work.proto",
}

func init() { proto.RegisterFile("api/work.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x1b, 0x53, 0xd3, 0x74, 0xaa, 0xa5, 0xce, 0x41, 0xd6, 0x5c, 0x94, 0x15, 0xa1, 0x5e,
	0xd2, 0x62, 0x4f, 0x5e, 0x3d, 0x08, 0xe2, 0xad, 0x06, 0x3c, 0x96, 0x34, 0xd9, 0xc2, 0x92, 0xc4,
	0x5d, 0x77, 0x13, 0x44, 0x7f, 0x86, 0xbf, 0x58, 0x76, 0xbb, 0x09, 0xd1, 0x82, 0xb7, 0x79, 0xdf,
	0xbc, 0xc9, 0xbc, 0xc9, 0xc2, 0x34, 0x95, 0x7c, 0xf1, 0x21, 0x54, 0x11, 0x4b, 0x25, 0x6a, 0x81,
	0x7e, 0x2a, 0x39, 0x5d, 0x40, 0x90, 0x08, 0xb9, 0x66, 0xef, 0x78, 0x03, 0xd3, 0x4c, 0x54, 0x55,
	0xfa, 0x96, 0x6f, 0x76, 0xbc, 0xac, 0x99, 0x22, 0xde, 0x95, 0x37, 0x1f, 0xaf, 0x4f, 0x1d, 0x7d,
	0xb4, 0x90, 0x7e, 0xb9, 0x01, 0x8d, 0x33, 0xf0, 0x25, 0xcf, 0x9d, 0xcb, 0x94, 0x86, 0x64, 0xb2,
	0x21, 0x47, 0x7b, 0x92, 0xc9, 0x06, 0x09, 0x8c, 0xdc, 0x38, 0xf1, 0x2d, 0x6d, 0x25, 0x9e, 0x43,
	0x50, 0xb1, 0x4a, 0xa8, 0x4f, 0x32, 0xb4, 0x0d, 0xa7, 0x30, 0x82, 0xb0, 0xe4, 0x3b, 0x56, 0xf3,
	0x8a, 0x91, 0x63, 0xdb, 0xe9, 0x34, 0xbd, 0x84, 0xc9, 0x33, 0x2f, 0xcb, 0x24, 0xd5, 0x85, 0x49,
	0x7c, 0x10, 0x80, 0xde, 0xf7, 0x0d, 0xda, 0x6c, 0xd7, 0x4d, 0x96, 0x31, 0xad, 0x9d, 0xa9, 0x95,
	0x66, 0x94, 0x29, 0xd5, 0x26, 0x65, 0x4a, 0xd1, 0x5b, 0x38, 0x79, 0xa9, 0x85, 0x7c, 0x68, 0x78,
	0x99, 0x9b, 0x8f, 0x5f, 0x40, 0xb8, 0x35, 0xf5, 0xa6, 0xdb, 0x30, 0xb2, 0xfa, 0x29, 0xa7, 0xf3,
	0x5f, 0xd6, 0x7f, 0xd6, 0xdc, 0x7d, 0x7b, 0x30, 0x7c, 0x15, 0xaa, 0xc0, 0x6b, 0xf0, 0x13, 0x21,
	0x71, 0x12, 0xa7, 0x92, 0xc7, 0xfb, 0x1f, 0x1e, 0xf5, 0x84, 0xa6, 0x83, 0xa5, 0x87, 0x4b, 0x08,
	0xdb, 0xf4, 0x38, 0xb3, 0xcd, 0xde, 0xb5, 0xd1, 0x5f, 0xa2, 0xe9, 0x00, 0x57, 0x30, 0xee, 0x92,
	0xe0, 0x99, 0x35, 0xf4, 0x8f, 0x88, 0x0e, 0x11, 0x1d, 0x6c, 0x03, 0xfb, 0xfc, 0xab, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x59, 0xae, 0x5d, 0x55, 0x10, 0x02, 0x00, 0x00,
}
