// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/shift.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/shift.proto
	api/work.proto

It has these top-level messages:
	RegisterReq
	RegisterRes
	UpdateBuildStatusReq
	UpdateBuildStatusRes
	GetProjectReq
	GetProjectRes
	TopReq
	TopRes
	KillTaskReq
	KillTaskRes
	StopBuildReq
	StopBuildRes
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterReq struct {
	BuildId    string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	Privatekey string `protobuf:"bytes,2,opt,name=privatekey" json:"privatekey,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterReq) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *RegisterReq) GetPrivatekey() string {
	if m != nil {
		return m.Privatekey
	}
	return ""
}

type RegisterRes struct {
	Registered bool `protobuf:"varint,1,opt,name=registered" json:"registered,omitempty"`
}

func (m *RegisterRes) Reset()                    { *m = RegisterRes{} }
func (m *RegisterRes) String() string            { return proto.CompactTextString(m) }
func (*RegisterRes) ProtoMessage()               {}
func (*RegisterRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterRes) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

type UpdateBuildStatusReq struct {
	BuildId    string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	Graph      string `protobuf:"bytes,2,opt,name=graph" json:"graph,omitempty"`
	Status     string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Checkpoint string `protobuf:"bytes,4,opt,name=checkpoint" json:"checkpoint,omitempty"`
	Reason     string `protobuf:"bytes,5,opt,name=reason" json:"reason,omitempty"`
}

func (m *UpdateBuildStatusReq) Reset()                    { *m = UpdateBuildStatusReq{} }
func (m *UpdateBuildStatusReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateBuildStatusReq) ProtoMessage()               {}
func (*UpdateBuildStatusReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateBuildStatusReq) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *UpdateBuildStatusReq) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *UpdateBuildStatusReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateBuildStatusReq) GetCheckpoint() string {
	if m != nil {
		return m.Checkpoint
	}
	return ""
}

func (m *UpdateBuildStatusReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UpdateBuildStatusRes struct {
}

func (m *UpdateBuildStatusRes) Reset()                    { *m = UpdateBuildStatusRes{} }
func (m *UpdateBuildStatusRes) String() string            { return proto.CompactTextString(m) }
func (*UpdateBuildStatusRes) ProtoMessage()               {}
func (*UpdateBuildStatusRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetProjectReq struct {
	BuildId          string `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	IncludeShiftfile bool   `protobuf:"varint,2,opt,name=include_shiftfile,json=includeShiftfile" json:"include_shiftfile,omitempty"`
}

func (m *GetProjectReq) Reset()                    { *m = GetProjectReq{} }
func (m *GetProjectReq) String() string            { return proto.CompactTextString(m) }
func (*GetProjectReq) ProtoMessage()               {}
func (*GetProjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetProjectReq) GetBuildId() string {
	if m != nil {
		return m.BuildId
	}
	return ""
}

func (m *GetProjectReq) GetIncludeShiftfile() bool {
	if m != nil {
		return m.IncludeShiftfile
	}
	return false
}

type GetProjectRes struct {
	ContainerId  string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	RepositoryId string `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId" json:"repository_id,omitempty"`
	VcsId        string `protobuf:"bytes,3,opt,name=vcs_id,json=vcsId" json:"vcs_id,omitempty"`
	Branch       string `protobuf:"bytes,4,opt,name=branch" json:"branch,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	CloneUrl     string `protobuf:"bytes,6,opt,name=clone_url,json=cloneUrl" json:"clone_url,omitempty"`
	Language     string `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Accesstoken  string `protobuf:"bytes,8,opt,name=accesstoken" json:"accesstoken,omitempty"`
	CommitId     string `protobuf:"bytes,9,opt,name=commit_id,json=commitId" json:"commit_id,omitempty"`
	StoragePath  string `protobuf:"bytes,10,opt,name=storage_path,json=storagePath" json:"storage_path,omitempty"`
	Source       string `protobuf:"bytes,11,opt,name=source" json:"source,omitempty"`
	Shiftfile    string `protobuf:"bytes,12,opt,name=shiftfile" json:"shiftfile,omitempty"`
}

func (m *GetProjectRes) Reset()                    { *m = GetProjectRes{} }
func (m *GetProjectRes) String() string            { return proto.CompactTextString(m) }
func (*GetProjectRes) ProtoMessage()               {}
func (*GetProjectRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetProjectRes) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *GetProjectRes) GetRepositoryId() string {
	if m != nil {
		return m.RepositoryId
	}
	return ""
}

func (m *GetProjectRes) GetVcsId() string {
	if m != nil {
		return m.VcsId
	}
	return ""
}

func (m *GetProjectRes) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *GetProjectRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetProjectRes) GetCloneUrl() string {
	if m != nil {
		return m.CloneUrl
	}
	return ""
}

func (m *GetProjectRes) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *GetProjectRes) GetAccesstoken() string {
	if m != nil {
		return m.Accesstoken
	}
	return ""
}

func (m *GetProjectRes) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *GetProjectRes) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *GetProjectRes) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *GetProjectRes) GetShiftfile() string {
	if m != nil {
		return m.Shiftfile
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterReq)(nil), "api.RegisterReq")
	proto.RegisterType((*RegisterRes)(nil), "api.RegisterRes")
	proto.RegisterType((*UpdateBuildStatusReq)(nil), "api.UpdateBuildStatusReq")
	proto.RegisterType((*UpdateBuildStatusRes)(nil), "api.UpdateBuildStatusRes")
	proto.RegisterType((*GetProjectReq)(nil), "api.GetProjectReq")
	proto.RegisterType((*GetProjectRes)(nil), "api.GetProjectRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Shift service

type ShiftClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
	GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRes, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusReq, opts ...grpc.CallOption) (*UpdateBuildStatusRes, error)
}

type shiftClient struct {
	cc *grpc.ClientConn
}

func NewShiftClient(cc *grpc.ClientConn) ShiftClient {
	return &shiftClient{cc}
}

func (c *shiftClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	out := new(RegisterRes)
	err := grpc.Invoke(ctx, "/api.Shift/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftClient) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRes, error) {
	out := new(GetProjectRes)
	err := grpc.Invoke(ctx, "/api.Shift/GetProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftClient) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusReq, opts ...grpc.CallOption) (*UpdateBuildStatusRes, error) {
	out := new(UpdateBuildStatusRes)
	err := grpc.Invoke(ctx, "/api.Shift/UpdateBuildStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Shift service

type ShiftServer interface {
	Register(context.Context, *RegisterReq) (*RegisterRes, error)
	GetProject(context.Context, *GetProjectReq) (*GetProjectRes, error)
	UpdateBuildStatus(context.Context, *UpdateBuildStatusReq) (*UpdateBuildStatusRes, error)
}

func RegisterShiftServer(s *grpc.Server, srv ShiftServer) {
	s.RegisterService(&_Shift_serviceDesc, srv)
}

func _Shift_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shift/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shift_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shift/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServer).GetProject(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shift_UpdateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServer).UpdateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Shift/UpdateBuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServer).UpdateBuildStatus(ctx, req.(*UpdateBuildStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shift_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Shift",
	HandlerType: (*ShiftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Shift_Register_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Shift_GetProject_Handler,
		},
		{
			MethodName: "UpdateBuildStatus",
			Handler:    _Shift_UpdateBuildStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shift.proto",
}

func init() { proto.RegisterFile("api/shift.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xd7, 0x6d, 0xed, 0xd2, 0xd3, 0x4e, 0x6c, 0xd6, 0x98, 0xbc, 0x82, 0xd0, 0x08, 0x37,
	0x48, 0x88, 0x82, 0x40, 0xe2, 0x01, 0xb8, 0x81, 0x8a, 0x9b, 0xa9, 0xd3, 0xc4, 0x65, 0xe5, 0x3a,
	0x67, 0x89, 0x69, 0x6a, 0x1b, 0xdb, 0xa9, 0xb4, 0x27, 0xe1, 0x6d, 0x78, 0x21, 0x5e, 0x02, 0xf9,
	0x4f, 0x49, 0xc6, 0x36, 0xed, 0x2e, 0xdf, 0xef, 0xf8, 0x9c, 0x7c, 0xfe, 0x6c, 0xc3, 0x13, 0xa6,
	0xc5, 0x3b, 0x5b, 0x89, 0x6b, 0x37, 0xd5, 0x46, 0x39, 0x45, 0xf6, 0x98, 0x16, 0xf9, 0x57, 0x18,
	0xcd, 0xb1, 0x14, 0xd6, 0xa1, 0x99, 0xe3, 0x4f, 0x72, 0x06, 0xd9, 0xb2, 0x11, 0x75, 0xb1, 0x10,
	0x05, 0xed, 0x9d, 0xf7, 0x5e, 0x0f, 0xe7, 0x07, 0x41, 0xcf, 0x0a, 0xf2, 0x02, 0x40, 0x1b, 0xb1,
	0x61, 0x0e, 0x57, 0x78, 0x43, 0x77, 0x43, 0xb1, 0x43, 0xf2, 0xb7, 0xdd, 0x49, 0xd6, 0x2f, 0x37,
	0x49, 0x62, 0x9c, 0x95, 0xcd, 0x3b, 0x24, 0xff, 0xd5, 0x83, 0x93, 0x2b, 0x5d, 0x30, 0x87, 0x9f,
	0xfd, 0x0f, 0x2e, 0x1d, 0x73, 0x8d, 0x7d, 0xc4, 0xc2, 0x09, 0xf4, 0x4b, 0xc3, 0x74, 0x95, 0xfe,
	0x1e, 0x05, 0x39, 0x85, 0x81, 0x0d, 0xdd, 0x74, 0x2f, 0xe0, 0xa4, 0xbc, 0x03, 0x5e, 0x21, 0x5f,
	0x69, 0x25, 0xa4, 0xa3, 0xfb, 0xd1, 0x70, 0x4b, 0x7c, 0x9f, 0x41, 0x66, 0x95, 0xa4, 0xfd, 0xd8,
	0x17, 0x55, 0x7e, 0x7a, 0xaf, 0x31, 0x9b, 0x7f, 0x87, 0xc3, 0x2f, 0xe8, 0x2e, 0x8c, 0xfa, 0x81,
	0xdc, 0x3d, 0xe2, 0xf4, 0x0d, 0x1c, 0x0b, 0xc9, 0xeb, 0xa6, 0xc0, 0x45, 0x88, 0xfc, 0x5a, 0xd4,
	0x18, 0x5c, 0x67, 0xf3, 0xa3, 0x54, 0xb8, 0xdc, 0xf2, 0xfc, 0xcf, 0xee, 0xed, 0xc9, 0x96, 0xbc,
	0x84, 0x31, 0x57, 0xd2, 0x31, 0x21, 0xd1, 0xb4, 0xd3, 0x47, 0xff, 0xd8, 0xac, 0x20, 0xaf, 0xe0,
	0xd0, 0xa0, 0x56, 0x56, 0x38, 0x65, 0x6e, 0xfc, 0x9a, 0x98, 0xc9, 0xb8, 0x85, 0xb3, 0x82, 0x3c,
	0x85, 0xc1, 0x86, 0x5b, 0x5f, 0x8d, 0xd1, 0xf4, 0x37, 0xdc, 0xce, 0x0a, 0xbf, 0xf3, 0xa5, 0x61,
	0x92, 0x57, 0x29, 0x95, 0xa4, 0x08, 0x81, 0x7d, 0xc9, 0xd6, 0x98, 0xf2, 0x08, 0xdf, 0xe4, 0x19,
	0x0c, 0x79, 0xad, 0x24, 0x2e, 0x1a, 0x53, 0xd3, 0x41, 0x28, 0x64, 0x01, 0x5c, 0x99, 0x9a, 0x4c,
	0x20, 0xab, 0x99, 0x2c, 0x1b, 0x56, 0x22, 0x3d, 0x88, 0xb5, 0xad, 0x26, 0xe7, 0x30, 0x62, 0x9c,
	0xa3, 0xb5, 0x4e, 0xad, 0x50, 0xd2, 0x2c, 0x6e, 0xa1, 0x83, 0xc2, 0x68, 0xb5, 0x5e, 0x0b, 0xe7,
	0x0d, 0x0e, 0xd3, 0xe8, 0x00, 0x66, 0x85, 0x8f, 0xc0, 0x3a, 0x65, 0x58, 0x89, 0x0b, 0xcd, 0x5c,
	0x45, 0x21, 0xf6, 0x27, 0x76, 0xc1, 0x5c, 0x3c, 0x78, 0xd5, 0x18, 0x8e, 0x74, 0x94, 0x0e, 0x3e,
	0x28, 0xf2, 0x1c, 0x86, 0x6d, 0xe8, 0xe3, 0x50, 0x6a, 0xc1, 0x87, 0xdf, 0x3d, 0xe8, 0x87, 0xec,
	0xc9, 0x7b, 0xc8, 0xb6, 0x37, 0x96, 0x1c, 0x4d, 0x99, 0x16, 0xd3, 0xce, 0x53, 0x98, 0xfc, 0x4f,
	0x6c, 0xbe, 0x43, 0x3e, 0x01, 0xb4, 0x07, 0x45, 0x48, 0x58, 0x71, 0xeb, 0x4e, 0x4c, 0xee, 0x32,
	0xdf, 0xf7, 0x0d, 0x8e, 0xef, 0x5c, 0x29, 0x72, 0x16, 0x96, 0xde, 0xf7, 0x06, 0x26, 0x0f, 0x96,
	0x6c, 0xbe, 0xb3, 0x1c, 0x84, 0xe7, 0xfb, 0xf1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xe8,
	0x8e, 0xeb, 0xd1, 0x03, 0x00, 0x00,
}
