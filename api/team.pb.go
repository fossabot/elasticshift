// Code generated by protoc-gen-go.
// source: api/team.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateTeamReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateTeamReq) Reset()                    { *m = CreateTeamReq{} }
func (m *CreateTeamReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamReq) ProtoMessage()               {}
func (*CreateTeamReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *CreateTeamReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateTeamRes struct {
	AlreadyExist string `protobuf:"bytes,1,opt,name=already_exist,json=alreadyExist" json:"already_exist,omitempty"`
}

func (m *CreateTeamRes) Reset()                    { *m = CreateTeamRes{} }
func (m *CreateTeamRes) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamRes) ProtoMessage()               {}
func (*CreateTeamRes) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CreateTeamRes) GetAlreadyExist() string {
	if m != nil {
		return m.AlreadyExist
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateTeamReq)(nil), "api.CreateTeamReq")
	proto.RegisterType((*CreateTeamRes)(nil), "api.CreateTeamRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Team service

type TeamClient interface {
	Create(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamRes, error)
}

type teamClient struct {
	cc *grpc.ClientConn
}

func NewTeamClient(cc *grpc.ClientConn) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) Create(ctx context.Context, in *CreateTeamReq, opts ...grpc.CallOption) (*CreateTeamRes, error) {
	out := new(CreateTeamRes)
	err := grpc.Invoke(ctx, "/api.Team/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Team service

type TeamServer interface {
	Create(context.Context, *CreateTeamReq) (*CreateTeamRes, error)
}

func RegisterTeamServer(s *grpc.Server, srv TeamServer) {
	s.RegisterService(&_Team_serviceDesc, srv)
}

func _Team_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Team/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).Create(ctx, req.(*CreateTeamReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Team_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Team_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/team.proto",
}

func init() { proto.RegisterFile("api/team.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2c, 0xc8, 0xd4,
	0x2f, 0x49, 0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94,
	0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xc9, 0x25, 0xe6, 0xe5, 0xe5, 0x97, 0x24,
	0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x94, 0x28, 0x29, 0x73, 0xf1, 0x3a, 0x17, 0xa5, 0x26, 0x96,
	0xa4, 0x86, 0xa4, 0x26, 0xe6, 0x06, 0xa5, 0x16, 0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x26, 0xa8, 0x8a, 0x8a, 0x85, 0x94,
	0xb9, 0x78, 0x13, 0x73, 0x8a, 0x52, 0x13, 0x53, 0x2a, 0xe3, 0x53, 0x2b, 0x32, 0x8b, 0x4b, 0xa0,
	0xaa, 0x79, 0xa0, 0x82, 0xae, 0x20, 0x31, 0x23, 0x2f, 0x2e, 0x16, 0x90, 0x7a, 0x21, 0x27, 0x2e,
	0x36, 0x88, 0x6e, 0x21, 0x21, 0xbd, 0xc4, 0x82, 0x4c, 0x3d, 0x14, 0xfb, 0xa4, 0x30, 0xc5, 0x8a,
	0x95, 0x04, 0x9a, 0x2e, 0x3f, 0x99, 0xcc, 0xc4, 0x25, 0xc4, 0xa1, 0x5f, 0x66, 0x08, 0xf6, 0x4f,
	0x12, 0x1b, 0xd8, 0xb5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xa4, 0x12, 0xfd, 0xe2,
	0x00, 0x00, 0x00,
}
