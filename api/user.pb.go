// Code generated by protoc-gen-go.
// source: api/user.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SignUpReq struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Fullname string `protobuf:"bytes,2,opt,name=fullname" json:"fullname,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Team     string `protobuf:"bytes,4,opt,name=team" json:"team,omitempty"`
}

func (m *SignUpReq) Reset()                    { *m = SignUpReq{} }
func (m *SignUpReq) String() string            { return proto.CompactTextString(m) }
func (*SignUpReq) ProtoMessage()               {}
func (*SignUpReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SignUpReq) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SignUpReq) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *SignUpReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SignUpReq) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

type SignUpRes struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *SignUpRes) Reset()                    { *m = SignUpRes{} }
func (m *SignUpRes) String() string            { return proto.CompactTextString(m) }
func (*SignUpRes) ProtoMessage()               {}
func (*SignUpRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *SignUpRes) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type SignInReq struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Team     string `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
}

func (m *SignInReq) Reset()                    { *m = SignInReq{} }
func (m *SignInReq) String() string            { return proto.CompactTextString(m) }
func (*SignInReq) ProtoMessage()               {}
func (*SignInReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SignInReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SignInReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SignInReq) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

type SignInRes struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *SignInRes) Reset()                    { *m = SignInRes{} }
func (m *SignInRes) String() string            { return proto.CompactTextString(m) }
func (*SignInRes) ProtoMessage()               {}
func (*SignInRes) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *SignInRes) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*SignUpReq)(nil), "api.SignUpReq")
	proto.RegisterType((*SignUpRes)(nil), "api.SignUpRes")
	proto.RegisterType((*SignInReq)(nil), "api.SignInReq")
	proto.RegisterType((*SignInRes)(nil), "api.SignInRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error)
	SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) SignUp(ctx context.Context, in *SignUpReq, opts ...grpc.CallOption) (*SignUpRes, error) {
	out := new(SignUpRes)
	err := grpc.Invoke(ctx, "/api.User/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SignIn(ctx context.Context, in *SignInReq, opts ...grpc.CallOption) (*SignInRes, error) {
	out := new(SignInRes)
	err := grpc.Invoke(ctx, "/api.User/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	SignUp(context.Context, *SignUpReq) (*SignUpRes, error)
	SignIn(context.Context, *SignInReq) (*SignInRes, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SignUp(ctx, req.(*SignUpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.User/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SignIn(ctx, req.(*SignInReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _User_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _User_SignIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user.proto",
}

func init() { proto.RegisterFile("api/user.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x91, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x95, 0x1f, 0x4a, 0xea, 0xa1, 0x48, 0x56, 0x87, 0xc8, 0x62, 0x00, 0x4b, 0x48, 0xa8,
	0x43, 0x22, 0x60, 0xeb, 0xcc, 0xd2, 0x35, 0xa8, 0x62, 0xbe, 0x50, 0x13, 0x59, 0x72, 0x6c, 0x63,
	0x3b, 0x65, 0xe7, 0x11, 0xe0, 0xd1, 0x78, 0x05, 0x1e, 0xa4, 0xb2, 0xad, 0xa4, 0xcd, 0xd0, 0x2d,
	0x5f, 0x8e, 0x75, 0xbe, 0x7b, 0x6d, 0xb4, 0x00, 0xcd, 0xeb, 0xde, 0x32, 0x53, 0x69, 0xa3, 0x9c,
	0xc2, 0x19, 0x68, 0x4e, 0xae, 0x5b, 0xa5, 0x5a, 0xc1, 0x6a, 0x9f, 0x81, 0x94, 0xca, 0x81, 0xe3,
	0x4a, 0xda, 0x78, 0x84, 0x76, 0x68, 0xfe, 0xc2, 0x5b, 0xb9, 0xd5, 0x0d, 0xfb, 0xc4, 0x4b, 0x74,
	0xc1, 0x3a, 0xe0, 0xa2, 0x4c, 0x6e, 0x92, 0xfb, 0x79, 0x13, 0x01, 0x13, 0x54, 0x7c, 0xf4, 0x42,
	0x48, 0xe8, 0x58, 0x99, 0x86, 0x60, 0x64, 0x9f, 0x69, 0xb0, 0xf6, 0x4b, 0x99, 0x5d, 0x99, 0xc5,
	0x6c, 0x60, 0x8c, 0x51, 0xee, 0x18, 0x74, 0x65, 0x1e, 0xfe, 0x87, 0x6f, 0x7a, 0x77, 0xd4, 0x59,
	0x5c, 0xa2, 0xcb, 0x77, 0xc3, 0xc0, 0xb1, 0x5d, 0x10, 0x16, 0xcd, 0x80, 0xf4, 0x35, 0x1e, 0xdb,
	0x48, 0x3f, 0x15, 0x41, 0x85, 0xdf, 0x29, 0xf8, 0xe3, 0x60, 0x23, 0x4f, 0xfc, 0xe9, 0x19, 0x7f,
	0x76, 0xe2, 0xbf, 0x3d, 0x16, 0x5b, 0xbf, 0xee, 0x1e, 0x04, 0x1f, 0xec, 0x11, 0x1e, 0x7f, 0x12,
	0x94, 0x6f, 0x2d, 0x33, 0xf8, 0x19, 0xcd, 0xe2, 0xac, 0x78, 0x51, 0x81, 0xe6, 0xd5, 0x78, 0x4f,
	0x64, 0xca, 0x96, 0x92, 0xef, 0xbf, 0xff, 0xdf, 0x74, 0x49, 0xaf, 0xea, 0xfd, 0x43, 0xb8, 0xff,
	0xda, 0xf2, 0x56, 0xf6, 0x7a, 0x9d, 0xac, 0x86, 0x96, 0x8d, 0x3c, 0x69, 0x09, 0x7b, 0x91, 0x29,
	0x9f, 0x6b, 0xe1, 0x72, 0x9d, 0xac, 0xde, 0x66, 0xe1, 0xb5, 0x9e, 0x0e, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x76, 0x46, 0x3e, 0xe2, 0x01, 0x00, 0x00,
}
