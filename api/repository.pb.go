// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/repository.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Repo struct {
	ID            string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Private       bool   `protobuf:"varint,2,opt,name=private" json:"private,omitempty"`
	Link          string `protobuf:"bytes,3,opt,name=link" json:"link,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Fork          bool   `protobuf:"varint,5,opt,name=fork" json:"fork,omitempty"`
	DefaultBranch string `protobuf:"bytes,6,opt,name=default_branch,json=defaultBranch" json:"default_branch,omitempty"`
	Language      string `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
}

func (m *Repo) Reset()                    { *m = Repo{} }
func (m *Repo) String() string            { return proto.CompactTextString(m) }
func (*Repo) ProtoMessage()               {}
func (*Repo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Repo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Repo) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Repo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Repo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repo) GetFork() bool {
	if m != nil {
		return m.Fork
	}
	return false
}

func (m *Repo) GetDefaultBranch() string {
	if m != nil {
		return m.DefaultBranch
	}
	return ""
}

func (m *Repo) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type GetRepositoriesReq struct {
}

func (m *GetRepositoriesReq) Reset()                    { *m = GetRepositoriesReq{} }
func (m *GetRepositoriesReq) String() string            { return proto.CompactTextString(m) }
func (*GetRepositoriesReq) ProtoMessage()               {}
func (*GetRepositoriesReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type GetRepositoriesRes struct {
	Repositories []*Repo `protobuf:"bytes,1,rep,name=repositories" json:"repositories,omitempty"`
}

func (m *GetRepositoriesRes) Reset()                    { *m = GetRepositoriesRes{} }
func (m *GetRepositoriesRes) String() string            { return proto.CompactTextString(m) }
func (*GetRepositoriesRes) ProtoMessage()               {}
func (*GetRepositoriesRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetRepositoriesRes) GetRepositories() []*Repo {
	if m != nil {
		return m.Repositories
	}
	return nil
}

type GetRepositoryReq struct {
	RepoId string `protobuf:"bytes,1,opt,name=repo_id,json=repoId" json:"repo_id,omitempty"`
}

func (m *GetRepositoryReq) Reset()                    { *m = GetRepositoryReq{} }
func (m *GetRepositoryReq) String() string            { return proto.CompactTextString(m) }
func (*GetRepositoryReq) ProtoMessage()               {}
func (*GetRepositoryReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetRepositoryReq) GetRepoId() string {
	if m != nil {
		return m.RepoId
	}
	return ""
}

type GetRepositoryRes struct {
	Repository *Repo `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
}

func (m *GetRepositoryRes) Reset()                    { *m = GetRepositoryRes{} }
func (m *GetRepositoryRes) String() string            { return proto.CompactTextString(m) }
func (*GetRepositoryRes) ProtoMessage()               {}
func (*GetRepositoryRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetRepositoryRes) GetRepository() *Repo {
	if m != nil {
		return m.Repository
	}
	return nil
}

func init() {
	proto.RegisterType((*Repo)(nil), "api.Repo")
	proto.RegisterType((*GetRepositoriesReq)(nil), "api.GetRepositoriesReq")
	proto.RegisterType((*GetRepositoriesRes)(nil), "api.GetRepositoriesRes")
	proto.RegisterType((*GetRepositoryReq)(nil), "api.GetRepositoryReq")
	proto.RegisterType((*GetRepositoryRes)(nil), "api.GetRepositoryRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Repository service

type RepositoryClient interface {
	GetRepositories(ctx context.Context, in *GetRepositoriesReq, opts ...grpc.CallOption) (*GetRepositoriesRes, error)
	GetRepisotory(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*GetRepositoryRes, error)
}

type repositoryClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryClient(cc *grpc.ClientConn) RepositoryClient {
	return &repositoryClient{cc}
}

func (c *repositoryClient) GetRepositories(ctx context.Context, in *GetRepositoriesReq, opts ...grpc.CallOption) (*GetRepositoriesRes, error) {
	out := new(GetRepositoriesRes)
	err := grpc.Invoke(ctx, "/api.Repository/GetRepositories", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repositoryClient) GetRepisotory(ctx context.Context, in *GetRepositoryReq, opts ...grpc.CallOption) (*GetRepositoryRes, error) {
	out := new(GetRepositoryRes)
	err := grpc.Invoke(ctx, "/api.Repository/GetRepisotory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Repository service

type RepositoryServer interface {
	GetRepositories(context.Context, *GetRepositoriesReq) (*GetRepositoriesRes, error)
	GetRepisotory(context.Context, *GetRepositoryReq) (*GetRepositoryRes, error)
}

func RegisterRepositoryServer(s *grpc.Server, srv RepositoryServer) {
	s.RegisterService(&_Repository_serviceDesc, srv)
}

func _Repository_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Repository/GetRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRepositories(ctx, req.(*GetRepositoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repository_GetRepisotory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServer).GetRepisotory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Repository/GetRepisotory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServer).GetRepisotory(ctx, req.(*GetRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Repository",
	HandlerType: (*RepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepositories",
			Handler:    _Repository_GetRepositories_Handler,
		},
		{
			MethodName: "GetRepisotory",
			Handler:    _Repository_GetRepisotory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/repository.proto",
}

func init() { proto.RegisterFile("api/repository.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x49, 0xf4, 0xfa, 0xe7, 0x78, 0xf5, 0xca, 0xc1, 0x8b, 0x43, 0xb8, 0x8b, 0x10, 0xb8,
	0x60, 0x29, 0x35, 0xd4, 0xae, 0xbb, 0x69, 0x85, 0xe2, 0x36, 0xfb, 0x22, 0xa3, 0x19, 0xd3, 0xc1,
	0x90, 0x19, 0x67, 0xa2, 0x20, 0xa5, 0x9b, 0xbe, 0x42, 0x9f, 0xa7, 0x6f, 0xd0, 0x5d, 0x5f, 0xa1,
	0x0f, 0x52, 0x66, 0xd4, 0x1a, 0xab, 0xdd, 0xcd, 0xf9, 0xce, 0xef, 0x7c, 0x93, 0xef, 0x64, 0xa0,
	0x43, 0x25, 0x0f, 0x15, 0x93, 0x42, 0xf3, 0x5c, 0xa8, 0x75, 0x5f, 0x2a, 0x91, 0x0b, 0x2c, 0x51,
	0xc9, 0xbd, 0x7f, 0x89, 0x10, 0x49, 0xca, 0x42, 0x43, 0xd0, 0x2c, 0x13, 0x39, 0xcd, 0xb9, 0xc8,
	0xf4, 0x06, 0x09, 0x5e, 0x1d, 0x28, 0x47, 0x4c, 0x0a, 0x6c, 0x81, 0x3b, 0x1a, 0x12, 0xc7, 0x77,
	0x7a, 0xf5, 0xc8, 0x1d, 0x0d, 0x91, 0x40, 0x55, 0x2a, 0xbe, 0xa2, 0x39, 0x23, 0xae, 0xef, 0xf4,
	0x6a, 0xd1, 0xae, 0x44, 0x84, 0x72, 0xca, 0xb3, 0x39, 0x29, 0x59, 0xd6, 0x9e, 0xd1, 0x87, 0x46,
	0xcc, 0xf4, 0x54, 0x71, 0x69, 0xcc, 0x49, 0xd9, 0xb6, 0x8a, 0x92, 0x99, 0x9a, 0x09, 0x35, 0x27,
	0xbf, 0xac, 0x99, 0x3d, 0xe3, 0x7f, 0x68, 0xc5, 0x6c, 0x46, 0x97, 0x69, 0x3e, 0x9e, 0x28, 0x9a,
	0x4d, 0x1f, 0x48, 0xc5, 0x0e, 0x36, 0xb7, 0xea, 0x8d, 0x15, 0xd1, 0x83, 0x5a, 0x4a, 0xb3, 0x64,
	0x49, 0x13, 0x46, 0xaa, 0x16, 0xf8, 0xaa, 0x83, 0x0e, 0xe0, 0x1d, 0xcb, 0xa3, 0x5d, 0x72, 0xce,
	0x74, 0xc4, 0x16, 0xc1, 0xed, 0x09, 0x55, 0xe3, 0x05, 0xfc, 0x56, 0x05, 0x89, 0x38, 0x7e, 0xa9,
	0xd7, 0x18, 0xd4, 0xfb, 0x54, 0xf2, 0xbe, 0x61, 0xa3, 0x83, 0x76, 0x70, 0x0e, 0xed, 0xa2, 0xc9,
	0x3a, 0x62, 0x0b, 0xec, 0x42, 0xd5, 0x30, 0x63, 0x1e, 0x6f, 0x57, 0x55, 0x31, 0xe5, 0x28, 0x0e,
	0xae, 0x8f, 0x60, 0x8d, 0x67, 0x00, 0xfb, 0x5f, 0x62, 0xf9, 0x83, 0xdb, 0x0a, 0xcd, 0xc1, 0x9b,
	0x03, 0xb0, 0x1f, 0xc6, 0x7b, 0xf8, 0xf3, 0xed, 0xfb, 0xb1, 0x6b, 0x07, 0x8f, 0xb3, 0x7a, 0x3f,
	0x34, 0x74, 0x40, 0x9e, 0xdf, 0x3f, 0x5e, 0x5c, 0xc4, 0x76, 0xb8, 0xba, 0x0c, 0x8b, 0xc9, 0x70,
	0x0c, 0xcd, 0x0d, 0xcf, 0xb5, 0xb0, 0xf7, 0xfd, 0x3d, 0xf2, 0x30, 0x69, 0xbd, 0x93, 0xb2, 0x0e,
	0x7c, 0x6b, 0xec, 0x21, 0x39, 0x30, 0x5e, 0x87, 0x8f, 0xdb, 0xd5, 0x3c, 0x4d, 0x2a, 0xf6, 0x71,
	0x5d, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x87, 0xb4, 0xd8, 0x97, 0x02, 0x00, 0x00,
}
