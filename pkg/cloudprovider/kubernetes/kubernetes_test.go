/*
Copyright 2017 The Elasticshift Authors.
*/
package kubernetes

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"testing"
)

var confEncoded = ``

func TestNewKubernetesClient(t *testing.T) {

	kc := getKubernetesClient()

	fmt.Println("Kub Client", kc)
	//c, err := kc.CreateContainer(&CreateContainerOptions{Image: "nginx", ImageVersion: "1.13.6"})

	// if err != nil {
	// 	panic(err)
	// }

	// j, err := json.Marshal(c)

	// if err != nil {
	// 	panic(err)
	// }

	// fmt.Printf("%v", string(j))

}

func TestCreateContainer(t *testing.T) {

}

func TestCreatePersistentVolume(t *testing.T) {
	kc := getKubernetesClient()
	pvo := &CreatePersistentVolumeOption{
		Path:         "/nfs/elasticshift",
		Server:       "10.10.3.128",
		MountOptions: []string{"hard", "nfsver=4.1"},
		provider:     NetworkFileShare,
		Name:         "pv-nfs-es",
		Capacity:     "5G",
	}
	res, err := kc.CreatePersistentVolume(pvo)

	if err != nil {
		panic(err)
	}

	fmt.Printf("Create Persistent Volume %v", res)
}

//func TestCreatePersistentVolumeHostDirectory(t *testing.T) {
//kc := getKubernetesClient()
//pvo := &CreatePersistentVolumeOption{
//Path:     "/Users/shahm/sandbox/es-nfs/hostpath",
//provider: HostLocalDirectory,
//}
//res, err := kc.CreatePersistentVolume(pvo)

//if err != nil {
//panic(err)
//}

//fmt.Printf("Create Persistent Volume %v", res)
//}

func getKubernetesClient() KubernetesClient {

	confBuf, err := base64.StdEncoding.DecodeString(confEncoded)
	if err != nil {
		fmt.Println("Error during kube initialization: ", err)
	}

	kco := &KubernetesClientOptions{KubeConfig: confBuf}
	// kco := &KubernetesClientOptions{KubeConfigFile: "/Users/ghazni/.kube/config"}
	//kco := &KubernetesClientOptions{KubeConfigFile: "$HOME/.kube/config"}
	kc, err := NewKubernetesClient(kco)
	if err != nil {
		fmt.Printf("Error from test run:  %v ", err)
	}

	fmt.Printf("%v", kc)
	r, _ := json.Marshal(kc)
	fmt.Printf("The Marshal string %v", string(r))
	return kc
}
